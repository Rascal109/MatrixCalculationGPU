#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) readonly buffer MatA {
    float A[];
};

layout(set = 0, binding = 1) readonly buffer MatB {
    float B[];
};

layout(set = 0, binding = 2) writeonly buffer MatC {
    float C[];
};

layout(push_constant) uniform Constants {
    int WIDTH_A;
    int HEIGHT_A;
    int WIDTH_B;
    int HEIGHT_B;
} constants;

shared float Asub[16][16];
shared float Bsub[16][16];

void main() {
    uint globalRow = gl_GlobalInvocationID.y;
    uint globalCol = gl_GlobalInvocationID.x;

    float sum = 0.0f;

    for (uint i = 0; i < (constants.WIDTH_A + 15) / 16; ++i) {
        // Load data into shared memory
        uint row = gl_LocalInvocationID.y;
        uint col = gl_LocalInvocationID.x;
        
        uint AIndex = (globalRow * constants.WIDTH_A) + (i * 16 + col);
        uint BIndex = (i * 16 + row) * constants.WIDTH_B + globalCol;

        Asub[row][col] = (globalRow < constants.HEIGHT_A && (i * 16 + col) < constants.WIDTH_A) ? A[AIndex] : 0.0f;
        Bsub[row][col] = ((i * 16 + row) < constants.HEIGHT_B && globalCol < constants.WIDTH_B) ? B[BIndex] : 0.0f;

        barrier();

        for (uint j = 0; j < 16; ++j) {
            sum += Asub[row][j] * Bsub[j][col];
        }

        barrier();
    }

    if (globalRow < constants.HEIGHT_A && globalCol < constants.WIDTH_B) {
        C[globalRow * constants.WIDTH_B + globalCol] = sum;
    }
}
